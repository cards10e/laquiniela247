generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Team {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(100)
  shortName     String        @map("short_name") @db.VarChar(10)
  logoUrl       String?       @map("logo_url") @db.VarChar(255)
  league        String        @default("Liga MX") @db.VarChar(50)
  createdAt     DateTime      @default(now()) @map("created_at")
  awayGames     Game[]        @relation("AwayTeam")
  homeGames     Game[]        @relation("HomeTeam")
  favoriteUsers UserProfile[]

  @@map("teams")
}

model Game {
  id         Int         @id @default(autoincrement())
  weekNumber Int         @map("week_number")
  homeTeamId Int         @map("home_team_id")
  awayTeamId Int         @map("away_team_id")
  matchDate  DateTime    @map("match_date")
  status     GameStatus  @default(SCHEDULED)
  homeScore  Int?        @map("home_score")
  awayScore  Int?        @map("away_score")
  result     GameResult?
  createdAt  DateTime    @default(now()) @map("created_at")
  bets       Bet[]
  awayTeam   Team        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeTeam   Team        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  week       Week        @relation(fields: [weekNumber], references: [weekNumber])

  @@index([weekNumber])
  @@index([matchDate])
  @@index([status])
  @@index([awayTeamId], map: "games_away_team_id_fkey")
  @@index([homeTeamId], map: "games_home_team_id_fkey")
  @@map("games")
}

model Week {
  id              Int               @id @default(autoincrement())
  weekNumber      Int               @unique @map("week_number")
  season          String            @db.VarChar(20)
  startDate       DateTime          @map("start_date")
  endDate         DateTime          @map("end_date")
  bettingDeadline DateTime          @map("betting_deadline")
  status          WeekStatus        @default(UPCOMING)
  createdAt       DateTime          @default(now()) @map("created_at")
  bets            Bet[]
  games           Game[]
  transactions    Transaction[]
  userPerformance UserPerformance[]

  @@unique([weekNumber, season])
  @@map("weeks")
}

model Bet {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  weekId     Int        @map("week_id")
  gameId     Int        @map("game_id")
  prediction GameResult
  isCorrect  Boolean?   @map("is_correct")
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  game       Game       @relation(fields: [gameId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  week       Week       @relation(fields: [weekId], references: [id])

  @@unique([userId, gameId])
  @@index([userId, weekId])
  @@index([gameId])
  @@index([weekId], map: "bets_week_id_fkey")
  @@map("bets")
}

model UserPerformance {
  id                 Int               @id @default(autoincrement())
  userId             Int               @map("user_id")
  weekId             Int               @map("week_id")
  totalPredictions   Int               @default(0) @map("total_predictions")
  correctPredictions Int               @default(0) @map("correct_predictions")
  percentage         Decimal           @default(0.00) @db.Decimal(5, 2)
  rankingPosition    Int?              @map("ranking_position")
  percentile         Decimal?          @db.Decimal(5, 2)
  winnings           Decimal           @default(0.00) @db.Decimal(10, 2)
  status             PerformanceStatus @default(PENDING)
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  user               User              @relation(fields: [userId], references: [id])
  week               Week              @relation(fields: [weekId], references: [id])

  @@unique([userId, weekId])
  @@index([weekId, rankingPosition])
  @@map("user_performance")
}

model UserProfile {
  id                  Int      @id @default(autoincrement())
  userId              Int      @unique @map("user_id")
  totalBets           Int      @default(0) @map("total_bets")
  totalCorrect        Int      @default(0) @map("total_correct")
  overallPercentage   Decimal  @default(0.00) @map("overall_percentage") @db.Decimal(5, 2)
  totalWinnings       Decimal  @default(0.00) @map("total_winnings") @db.Decimal(10, 2)
  bestWeekPercentage  Decimal  @default(0.00) @map("best_week_percentage") @db.Decimal(5, 2)
  bestRankingPosition Int?     @map("best_ranking_position")
  favoriteTeamId      Int?     @map("favorite_team_id")
  preferredLanguage   String   @default("es") @map("preferred_language") @db.VarChar(5)
  emailNotifications  Boolean  @default(true) @map("email_notifications")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")
  favoriteTeam        Team?    @relation(fields: [favoriteTeamId], references: [id])
  user                User     @relation(fields: [userId], references: [id])

  @@index([favoriteTeamId], map: "user_profiles_favorite_team_id_fkey")
  @@map("user_profiles")
}

model Transaction {
  id                   Int               @id @default(autoincrement())
  userId               Int               @map("user_id")
  weekId               Int?              @map("week_id")
  type                 TransactionType
  amount               Decimal           @db.Decimal(10, 2)
  currency             String            @default("MXN") @db.VarChar(3)
  status               TransactionStatus @default(PENDING)
  paymentMethod        String            @default("demo") @map("payment_method") @db.VarChar(50)
  transactionReference String?           @map("transaction_reference") @db.VarChar(100)
  description          String?           @db.Text
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  user                 User              @relation(fields: [userId], references: [id])
  week                 Week?             @relation(fields: [weekId], references: [id])

  @@index([userId])
  @@index([weekId])
  @@index([status])
  @@map("transactions")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique @db.VarChar(255)
  passwordHash    String            @map("password_hash") @db.VarChar(255)
  firstName       String?           @map("first_name") @db.VarChar(100)
  lastName        String?           @map("last_name") @db.VarChar(100)
  role            UserRole          @default(USER)
  isActive        Boolean           @default(true) @map("is_active")
  emailVerified   Boolean           @default(false) @map("email_verified")
  emailVerifiedAt DateTime?         @map("email_verified_at")
  lastLoginAt     DateTime?         @map("last_login_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  bets            Bet[]
  transactions    Transaction[]
  performance     UserPerformance[]
  profile         UserProfile?

  @@map("users")
}

enum GameStatus {
  SCHEDULED @map("scheduled")
  LIVE      @map("live")
  FINISHED  @map("finished")
}

enum GameResult {
  HOME @map("home")
  DRAW @map("draw")
  AWAY @map("away")
}

enum WeekStatus {
  UPCOMING @map("upcoming")
  OPEN     @map("open")
  CLOSED   @map("closed")
  FINISHED @map("finished")
}

enum PerformanceStatus {
  PENDING    @map("pending")
  CALCULATED @map("calculated")
}

enum TransactionType {
  ENTRY_FEE @map("entry_fee")
  WINNINGS  @map("winnings")
  REFUND    @map("refund")
}

enum TransactionStatus {
  PENDING   @map("pending")
  COMPLETED @map("completed")
  FAILED    @map("failed")
  CANCELLED @map("cancelled")
}

enum UserRole {
  USER  @map("user")
  ADMIN @map("admin")
}
